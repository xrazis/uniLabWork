/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _DS1_H_RPCGEN
#define _DS1_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct average {
	struct {
		u_int y_len;
		int *y_val;
	} y;
};
typedef struct average average;

struct minmax {
	struct {
		u_int y_len;
		int *y_val;
	} y;
};
typedef struct minmax minmax;

struct product {
	struct {
		u_int y_len;
		int *y_val;
	} y;
	struct {
		u_int x_len;
		float *x_val;
	} x;
};
typedef struct product product;

#define DISTRIBUTED_SYSTEMS 0x23451111
#define DS_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define CASE1 1
extern  float * case1_1(average *, CLIENT *);
extern  float * case1_1_svc(average *, struct svc_req *);
#define CASE2 2
extern  minmax * case2_1(minmax *, CLIENT *);
extern  minmax * case2_1_svc(minmax *, struct svc_req *);
#define CASE3 3
extern  product * case3_1(product *, CLIENT *);
extern  product * case3_1_svc(product *, struct svc_req *);
extern int distributed_systems_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define CASE1 1
extern  float * case1_1();
extern  float * case1_1_svc();
#define CASE2 2
extern  minmax * case2_1();
extern  minmax * case2_1_svc();
#define CASE3 3
extern  product * case3_1();
extern  product * case3_1_svc();
extern int distributed_systems_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_average (XDR *, average*);
extern  bool_t xdr_minmax (XDR *, minmax*);
extern  bool_t xdr_product (XDR *, product*);

#else /* K&R C */
extern bool_t xdr_average ();
extern bool_t xdr_minmax ();
extern bool_t xdr_product ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_DS1_H_RPCGEN */
